<?php
// $Id: storage_s3.module,v 1.1.4.7.2.14 2010/03/14 03:46:15 jbrown Exp $

// Copyright 2008-2009 Jonathan Brown


/**
 * Implement hook_storage_service_info() .
 */
function storage_s3_storage_service_info() {
  
  $info = array(
    'name' => t('Amazon S3 / CloudFront'),
    'dynamic' => FALSE,
    'local' => FALSE,
    'direct' => FALSE,
    'can_copy' => TRUE,
  );
  
  return $info;
}


function _storage_s3_signature($components, $secret_access_key) {

  return base64_encode(hash_hmac('sha1', utf8_encode(implode("\n", $components)), $secret_access_key, TRUE));
}


function _storage_s3_request($container, $method, $bucket = NULL, $object_name = NULL, $file = NULL) {
  $result = array();
  $date = date(DATE_RFC1123, time());   // we don't use $_SERVER['REQUEST_TIME'] in case it is too old

  $components = array($method, '', '', $date);
  
  $headers[] = 'Date: ' . $date;

  $curl_options = array(
    CURLOPT_RETURNTRANSFER => TRUE,
    CURLOPT_AUTOREFERER => TRUE,
    CURLOPT_FOLLOWLOCATION => TRUE,
    CURLOPT_USERAGENT => 'Storage API (http://drupal.org/project/storage_api)',
  );

  switch($method) {
  
    case 'PUT':
      $curl_options[CURLOPT_PUT] = TRUE;
      
      if($file) {

        if($container['serving'] == STORAGE_API_SERVING) {
          $headers[] = 'x-amz-acl: public-read';
          $components[] = 'x-amz-acl:public-read';
        }
        
        if($file['copy_source']) {
          $headers[] = 'x-amz-copy-source: ' . $file['copy_source'];
          $components[] = 'x-amz-copy-source:' . $file['copy_source'];
        }
      }

      if($file['filepath']) {
        $fp = fopen($file['filepath'], 'r');
        
        $components[1] = base64_encode($file['md5']);
        $components[2] = $file['mimetype'];
        
        $headers = array_merge($headers, storage_api_http_headers($file));
        
        $curl_options[CURLOPT_INFILE] = $fp;
        $curl_options[CURLOPT_INFILESIZE] = $file['size'];
      }
      else if(!$object_name && $container['settings']['location']) {

        $str = '<CreateBucketConfiguration><LocationConstraint>';
        $str .= $container['settings']['location'];
        $str .= '</LocationConstraint></CreateBucketConfiguration>';
        
        $fp = fopen('data:text/plain,' . $str, 'r');
        $curl_options[CURLOPT_INFILE] = $fp;
        $curl_options[CURLOPT_INFILESIZE] = strlen($str);
        $headers[] = 'Expect:';
      }
      else {
        $curl_options[CURLOPT_INFILESIZE] = 0;
        $headers[] = 'Expect:';
      }
      
      break;
      
    case 'HEAD':
      $curl_options[CURLOPT_NOBODY] = TRUE;
      break;
      
    case 'GET':
      if($object_name) {
        $result['filepath'] = tempnam(file_directory_temp(), '');
        $fp = fopen($result['filepath'], 'w');
        $curl_options[CURLOPT_FILE] = $fp;
      }
      
      break;
      
    case 'DELETE':
      $curl_options[CURLOPT_CUSTOMREQUEST] = 'DELETE';
      break;
  }
  
  if($bucket)
    $object_name = '/' . $object_name;
  
  $components[] = '/' . $bucket . $object_name;
  
  $signature = _storage_s3_signature($components, $container['settings']['secret_access_key']);
  $headers[] = 'Authorization: AWS ' . $container['settings']['access_key_id'] . ':' . $signature;

  $curl_options[CURLOPT_HTTPHEADER] = $headers;
  
  if($bucket)  
    $bucket .= '.';

  $ch = curl_init('http://' . $bucket . 's3.amazonaws.com' . $object_name);
  curl_setopt_array($ch, $curl_options);
  $transfer = curl_exec($ch);
  $result += curl_getinfo($ch);
  curl_close($ch);
  
  if($fp)
    fclose($fp);
    
  if($result['filepath'] && $result['http_code'] != 200) {
    @unlink($result['filepath']);
    unset($result['filepath']);
  }
  
  if(is_string($transfer) && $transfer != '') {
    $result['transfer'] = $transfer;
    $result['simplexml'] = @simplexml_load_string($transfer);

    if($result['simplexml']) {
      if($result['simplexml']->getName() == 'Error') {

        $msg = (string)$result['simplexml']->Message;

        watchdog('storage_s3', 'Amazon S3 error: @msg', array('@msg' => $msg), WATCHDOG_ERROR);

        if(user_access('administer storage'))
          drupal_set_message(t('Amazon S3 error: @msg', array('@msg' => $msg)), 'error');
      }
    }
  }
  
  return $result;
}


function _storage_s3_url($container, $s3_object) {

  if($container['settings']['cloudfront'] && 
    $container['settings']['cloudfront_status'] == 'Deployed')
  {
    $path = 'http://' . $container['settings']['cloudfront_domain'] . '/' . $s3_object;
  }
  else {
    $path = 'http://' . $container['settings']['bucket'] . '.s3.amazonaws.com/' . $s3_object;

    if($container['serving'] == STORAGE_API_ACCESS_CONTROL) {
      $query['AWSAccessKeyId'] = $container['settings']['access_key_id'];
      $query['Expires'] = $_SERVER['REQUEST_TIME'] + $container['settings']['url_lifetime'];
      
      $components = array(
        'GET',
        '',
        '',
        $query['Expires'],
        '/' . $container['settings']['bucket'] . '/' . $s3_object
      );
      
      $query['Signature'] = _storage_s3_signature($components, $container['settings']['secret_access_key']);
    }
  }

  return url($path, array('query' => $query));
}


function _storage_s3_rtmp($container, $s3_object) {

  if($container['settings']['cloudfront_streaming'] && 
    $container['settings']['cloudfront_streaming_status'] == 'Deployed')
  {
    return array(
      'streamer' => 'rtmp://' . $container['settings']['cloudfront_streaming_domain'] . '/cfx/st',
      'file' => $s3_object,
    );
  }

  return FALSE;
}


function _storage_s3_cloudfront_request($container, $method, $streaming = FALSE, $xml = NULL) {
  $result = array();
  $date = date(DATE_RFC1123, time());   // we don't use $_SERVER['REQUEST_TIME'] in case it is too old

  $headers[] = 'Date: ' . $date;

  $curl_options = array(
    CURLOPT_HEADER => TRUE,
    CURLOPT_RETURNTRANSFER => TRUE,
    CURLOPT_AUTOREFERER => TRUE,
    CURLOPT_FOLLOWLOCATION => TRUE,
    CURLOPT_USERAGENT => 'Storage API (http://drupal.org/project/storage_api)',
  );

  if($streaming) {
    $path = '/2009-12-01/streaming-distribution';
    $id = $container['settings']['cloudfront_streaming_id'];
  }
  else {
    $path = '/2009-12-01/distribution';
    $id = $container['settings']['cloudfront_id'];
  }

  switch($method) {
  
    case 'POST':
      $curl_options[CURLOPT_POST] = TRUE;
      $curl_options[CURLOPT_POSTFIELDS] = $xml;
      $headers[] = 'Content-Type: text/xml';
      $headers[] = 'Expect:';
      break;

    case 'PUT':
      $curl_options[CURLOPT_PUT] = TRUE;
      
      $fp = fopen('data:text/plain,' . $xml, 'r');
      $curl_options[CURLOPT_INFILE] = $fp;
      $curl_options[CURLOPT_INFILESIZE] = strlen($xml);
      $headers[] = 'Expect:';
      $headers[] = 'If-Match: ' . $container['settings']['etag'];
      
      $path .= '/' . $id . '/config';
      break;
      
    case 'GET':
      $path .= '/' . $id;
      break;
      
    case 'DELETE':
      $curl_options[CURLOPT_CUSTOMREQUEST] = 'DELETE';
      $headers[] = 'If-Match: ' . $container['settings']['etag'];
      $path .= '/' . $id;
      break;
  }
  
  $signature = base64_encode(hash_hmac('sha1', utf8_encode($date), $container['settings']['secret_access_key'], TRUE));
  $headers[] = 'Authorization: AWS ' . $container['settings']['access_key_id'] . ':' . $signature;

  $curl_options[CURLOPT_HTTPHEADER] = $headers;
  
  $ch = curl_init('https://cloudfront.amazonaws.com' . $path);
  curl_setopt_array($ch, $curl_options);
  $transfer = curl_exec($ch);
  $result = curl_getinfo($ch);
  curl_close($ch);
  
  if($fp)
    fclose($fp);
    
  if(is_string($transfer) && $transfer != '') {
    
    list($headers, $result['body']) = explode("\r\n\r\n", $transfer, 2);
    
    $headers = preg_split("/\r\n|\n|\r/", $headers);
    
    foreach($headers as $header) {
      list($header, $value) = explode(':', $header, 2);
      $result['headers'][$header] = $value;
    }

    $result['simplexml'] = @simplexml_load_string($result['body']);
    
    if($result['simplexml']) {
      if($result['simplexml']->getName() == 'ErrorResponse') {
      
        $msg = (string)$result['simplexml']->Error->Message;

        watchdog('storage_s3', 'Amazon CloudFront error: @msg', array('@msg' => $msg), WATCHDOG_ERROR);

        if(user_access('administer storage'))
          drupal_set_message(t('Amazon CloudFront error: @msg', array('@msg' => $msg)), 'error');
      }
    }
  }
  
  return $result;
}


function _storage_s3_locations() {

  return array(
    '' => t('US Standard'),
    'us-west-1' => t('US-West (Northern California)'),
    'EU' => t('EU (Ireland)'),
  );
}


/**
 * Implement hook_storage_container_settings_form() .
 */
function storage_s3_storage_container_settings_form($settings, $serving, $edit) {

  $items['credentials_info'] = array(
    '#value' => t('Get your credentials !link.', array('!link' => l(t('here'), 
      'http://aws-portal.amazon.com/gp/aws/developer/account/index.html?action=access-key', 
        array('attributes' => array('target' => '_blank')))))
  );

  $items['access_key_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Access key ID'),
    '#required' => TRUE,
    '#validated' => TRUE,
    '#default_value' => $settings['access_key_id']
  );
  
  $items['secret_access_key'] = array(
    '#type' => 'password',
    '#title' => t('Secret access key'),
    '#required' => TRUE,
    '#validated' => TRUE,
  );

  if(!$edit) {

    $items['bucket'] = array(
      '#type' => 'textfield',
      '#title' => t('Bucket name'),
      '#required' => TRUE,
      '#validated' => TRUE,
      '#default_value' => $settings['bucket'],
      '#maxlength' => 63,
      '#description' => t('The bucket namespace is shared by all users of Amazon S3.'),
    );

    $items['location'] = array(
      '#type' => 'select',
      '#title' => t('Location'),
      '#options' => _storage_s3_locations(),
    );
  }
  
  if($serving == STORAGE_API_SERVING) {
  
//    $description = t('(seconds)<br />This container will produce cryptographically signed URLs that will cease to function once their lifetime is over.');
  
    $items['cloudfront'] = array(
      '#type' => 'checkbox',
      '#title' => t('Serve with CloudFront'),
      '#default_value' => $settings['cloudfront'],
      '#description' => $description,
    );

    $items['cloudfront_streaming'] = array(
      '#type' => 'checkbox',
      '#title' => t('Stream with CloudFront'),
      '#default_value' => $settings['cloudfront_streaming'],
      '#description' => $description,
    );
  }

  if($serving == STORAGE_API_ACCESS_CONTROL) {
  
    $description = t('(seconds)<br />This container will produce cryptographically signed URLs that will cease to function once their lifetime is over.');
  
    $items['url_lifetime'] = array(
      '#type' => 'textfield',
      '#title' => t('URL lifetime'),
      '#required' => TRUE,
      '#validated' => TRUE,
      '#default_value' => $settings['url_lifetime'] ? $settings['url_lifetime'] : 60 * 60,
      '#description' => $description,
      '#size' => 8,
      '#maxlength' => 8,
    );
  }

  return $items;
}


/**
 * Implement hook_storage_container_validate() .
 */
function storage_s3_storage_container_validate($container, $edit) {

  if(!$container['settings']['access_key_id']) {
    form_set_error('settings][access_key_id', t('Access Key ID field is required.'));
  }

  if(!$container['settings']['secret_access_key']) {
    form_set_error('settings][secret_access_key', t('Secret Access Key field is required.'));
  }
  
  if(!$container['settings']['bucket']) {
    form_set_error('settings][bucket', t('Bucket name field is required.'));
  }
  
  if(form_get_errors())
    return;
    
  
  // test account credentials

  $result = _storage_s3_request($container, 'GET');   // HEAD doesn't work
    
  if($result['http_code'] != 200) {
    form_set_error('settings');
    return;
  }
}


function _storage_s3_cloudfront_caller_reference() {
  static $id;

  // make sure we can create multiple distributions at the same time
  return $_SERVER['REQUEST_TIME'] . '-' . ++$id;
}


function _storage_s3_cloudfront_distribution_create(&$container) {

  $xml = '<?xml version="1.0" encoding="UTF-8"?>';
  $xml .= '<DistributionConfig xmlns="http://cloudfront.amazonaws.com/doc/2009-12-01/">';
  $xml .= '<Origin>' . $container['settings']['bucket'] . '.s3.amazonaws.com</Origin>';
  $xml .= '<CallerReference>' . _storage_s3_cloudfront_caller_reference() . '</CallerReference>';
  $xml .= '<Enabled>true</Enabled>';
  $xml .= '</DistributionConfig>';

  $result = _storage_s3_cloudfront_request($container, 'POST', FALSE, $xml);
  
  if($result['http_code'] != 201) {
    $container['settings']['cloudfront'] = FALSE;
    return;
  }

  $container['settings']['cloudfront_id'] = (string)$result['simplexml']->Id;
  $container['settings']['cloudfront_status'] = (string)$result['simplexml']->Status;
  $container['settings']['cloudfront_domain'] = (string)$result['simplexml']->DomainName;

  $message = 'Added CloudFront distribution to storage container <i>' . $container['name'] . '</i>.';
  $path = 'admin/build/storage/containers/' . $container['container_id'];

  drupal_set_message($message);
  watchdog('storage_s3', $message, NULL, WATCHDOG_NOTICE, l(t('view'), $path));
}


function _storage_s3_cloudfront_streaming_distribution_create(&$container) {

  $xml = '<?xml version="1.0" encoding="UTF-8"?>';
  $xml .= '<StreamingDistributionConfig xmlns="http://cloudfront.amazonaws.com/doc/2009-12-01/">';
  $xml .= '<Origin>' . $container['settings']['bucket'] . '.s3.amazonaws.com</Origin>';
  $xml .= '<CallerReference>' . _storage_s3_cloudfront_caller_reference() . '</CallerReference>';
  $xml .= '<Enabled>true</Enabled>';
  $xml .= '</StreamingDistributionConfig>';

  $result = _storage_s3_cloudfront_request($container, 'POST', TRUE, $xml);
  
  if($result['http_code'] != 201) {
    $container['settings']['cloudfront_streaming'] = FALSE;
    return;
  }

  $container['settings']['cloudfront_streaming_id'] = (string)$result['simplexml']->Id;
  $container['settings']['cloudfront_streaming_status'] = (string)$result['simplexml']->Status;
  $container['settings']['cloudfront_streaming_domain'] = (string)$result['simplexml']->DomainName;

  $message = 'Added CloudFront streaming distribution to storage container <i>' . $container['name'] . '</i>.';
  $path = 'admin/build/storage/containers/' . $container['container_id'];

  drupal_set_message($message);
  watchdog('storage_s3', $message, NULL, WATCHDOG_NOTICE, l(t('view'), $path));
}


/**
 * Implement hook_storage_container_create() .
 */
function storage_s3_storage_container_create($container) {

  // check if bucket is already owned by this account

  $result = _storage_s3_request($container, 'HEAD', $container['settings']['bucket']);

  if($result['http_code'] == 200) {
  
    $result = _storage_s3_request($container, 'GET', $container['settings']['bucket']);
    
    if(count($result['simplexml']->Contents) > 0) {
    
      form_set_error('settings][bucket', t('Bucket %name is already owned by this account, but is not empty.', 
        array('%name' => $container['settings']['bucket'])));
        
      return $container;
    }
  }
  else {
    $result = _storage_s3_request($container, 'PUT', $container['settings']['bucket']);

    if($result['http_code'] != 200) {
      form_set_error('settings');
      return $container;
    }

    $message = 'Acquired S3 bucket <i>' . $container['settings']['bucket'] . '</i>.';
    drupal_set_message($message);
    watchdog('storage_s3', $message, NULL, WATCHDOG_NOTICE);
  }
  
  if($container['settings']['cloudfront']) {
    _storage_s3_cloudfront_distribution_create($container);
  }
    
  if($container['settings']['cloudfront_streaming']) {
    _storage_s3_cloudfront_streaming_distribution_create($container);
  }
    
  return $container;
}


/**
 * Implement hook_storage_container_postcreate() .
 */
function storage_s3_storage_container_postcreate($container) {

  if($container['settings']['cloudfront']) {
    
    $deploy = variable_get('storage_s3_cloudfront_deploy', array());
    $deploy[$container['container_id']] = TRUE;
    variable_set('storage_s3_cloudfront_deploy', $deploy);
  }

  if($container['settings']['cloudfront_streaming']) {
    
    $deploy = variable_get('storage_s3_cloudfront_streaming_deploy', array());
    $deploy[$container['container_id']] = TRUE;
    variable_set('storage_s3_cloudfront_streaming_deploy', $deploy);
  }
}


/**
 * Implement hook_storage_container_update() .
 */
function storage_s3_storage_container_update($container) {

  if($container['settings']['cloudfront'] && 
    !$container['settings']['cloudfront_id'])
  {
    _storage_s3_cloudfront_distribution_create($container);
    
    if($container['settings']['cloudfront']) {

      $deploy = variable_get('storage_s3_cloudfront_deploy', array());
      $deploy[$container['container_id']] = TRUE;
      variable_set('storage_s3_cloudfront_deploy', $deploy);
    }
  }
  
  if($container['settings']['cloudfront_streaming'] && 
    !$container['settings']['cloudfront_streaming_id'])
  {
    _storage_s3_cloudfront_streaming_distribution_create($container);
    
    if($container['settings']['cloudfront_streaming']) {

      $deploy = variable_get('storage_s3_cloudfront_streaming_deploy', array());
      $deploy[$container['container_id']] = TRUE;
      variable_set('storage_s3_cloudfront_streaming_deploy', $deploy);
    }
  }

  return $container;
}


/**
 * Implement hook_storage_container_destroy() .
 */
function storage_s3_storage_container_destroy($container) {

  if($container['settings']['cloudfront_id']) {

    $delete = variable_get('storage_s3_cloudfront_delete', array());
    $delete[$container['container_id']] = $container;
    variable_set('storage_s3_cloudfront_delete', $delete);
  }

  if($container['settings']['cloudfront_streaming_id']) {

    $delete = variable_get('storage_s3_cloudfront_streaming_delete', array());
    $delete[$container['container_id']] = $container;
    variable_set('storage_s3_cloudfront_streaming_delete', $delete);
  }
}


function _storage_s3_cloudfront_deploy() {

  $deploy = variable_get('storage_s3_cloudfront_deploy', array());
  
  foreach($deploy as $container_id => $null) {
  
    $container = storage_api_container_load($container_id);
    
    $result = _storage_s3_cloudfront_request($container, 'GET');
    
    if(!$result['http_code'])
      continue;
    
    if($result['http_code'] != 200) {
      $container['settings']['cloudfront'] = FALSE;
      $message = 'Failed to deploy CloudFront distribution for storage container <i>' . $container['name'] . '</i>.';
    }
    else {
      $container['settings']['cloudfront_status'] = (string)$result['simplexml']->Status;
      
      if($container['settings']['cloudfront_status'] != 'Deployed')
        continue;

      $message = 'Deployed CloudFront distribution for storage container <i>' . $container['name'] . '</i>.';
    }
  
    drupal_write_record('storage_container', $container, 'container_id');
    _storage_api_container_flush_serving_container($container['container_id']);
    
    unset($deploy[$container_id]);
    variable_set('storage_s3_cloudfront_deploy', $deploy);

    $path = 'admin/build/storage/containers/' . $container['container_id'];
    watchdog('storage_s3', $message, NULL, WATCHDOG_NOTICE, l(t('view'), $path));
  }
}


function _storage_s3_cloudfront_streaming_deploy() {

  $deploy = variable_get('storage_s3_cloudfront_streaming_deploy', array());
  
  foreach($deploy as $container_id => $null) {
  
    $container = storage_api_container_load($container_id);
    
    $result = _storage_s3_cloudfront_request($container, 'GET', TRUE);
    
    if(!$result['http_code'])
      continue;

    if($result['http_code'] != 200) {
      $container['settings']['cloudfront_streaming'] = FALSE;
      $message = 'Failed to deploy CloudFront streaming distribution for storage container <i>' . 
        $container['name'] . '</i>.';
    }
    else {
      $container['settings']['cloudfront_streaming_status'] = (string)$result['simplexml']->Status;
      
      if($container['settings']['cloudfront_streaming_status'] != 'Deployed')
        continue;
  
      $message = 'Deployed CloudFront streaming distribution for storage container <i>' . $container['name'] . '</i>.';
    }
  
    drupal_write_record('storage_container', $container, 'container_id');
    _storage_api_container_flush_serving_container($container['container_id']);

    unset($deploy[$container_id]);
    variable_set('storage_s3_cloudfront_streaming_deploy', $deploy);
    
    $path = 'admin/build/storage/containers/' . $container['container_id'];
    watchdog('storage_s3', $message, NULL, WATCHDOG_NOTICE, l(t('view'), $path));
  }
}


function _storage_s3_cloudfront_delete() {

  $delete = variable_get('storage_s3_cloudfront_delete', array());
  
  foreach($delete as $container) {
  
    $result = _storage_s3_cloudfront_request($container, 'GET');
    
    if(!$result['http_code'])
      continue;

    if($result['http_code'] == 200) {
      
      $container['settings']['etag'] = $result['headers']['ETag'];
        
      if($result['simplexml']->DistributionConfig->Enabled == 'true') {
      
        $xml = '<?xml version="1.0" encoding="UTF-8"?>';
        $xml .= '<DistributionConfig xmlns="http://cloudfront.amazonaws.com/doc/2009-12-01/">';
        $xml .= '<Origin>' . $container['settings']['bucket'] . '.s3.amazonaws.com</Origin>';
        $xml .= '<CallerReference>' . $result['simplexml']->DistributionConfig->CallerReference . '</CallerReference>';
        $xml .= '<Enabled>false</Enabled>';
        $xml .= '</DistributionConfig>';
      
        $result = _storage_s3_cloudfront_request($container, 'PUT', FALSE, $xml);

        if($result['http_code'] == 200) {

          $message = 'Disabled CloudFront distribution for destroyed container <i>' . $container['name'] . '</i>.';
          watchdog('storage_s3', $message, NULL, WATCHDOG_NOTICE);
          continue;
        }
      }
      else {
        
        if($result['simplexml']->Status == 'InProgress')
          continue;
      
        $result = _storage_s3_cloudfront_request($container, 'DELETE');

        if($result['http_code'] == 204) {

          $message = 'Deleted CloudFront distribution for destroyed container <i>' . $container['name'] . '</i>.';
          watchdog('storage_s3', $message, NULL, WATCHDOG_NOTICE);
        }
      }
    }
        
    unset($delete[$container['container_id']]);
    variable_set('storage_s3_cloudfront_delete', $delete);
  }
}


function _storage_s3_cloudfront_streaming_delete() {

  $delete = variable_get('storage_s3_cloudfront_streaming_delete', array());
  
  foreach($delete as $container) {
  
    $result = _storage_s3_cloudfront_request($container, 'GET', TRUE);
    
    if(!$result['http_code'])
      continue;

    if($result['http_code'] == 200) {
      
      $container['settings']['etag'] = $result['headers']['ETag'];
        
      if($result['simplexml']->StreamingDistributionConfig->Enabled == 'true') {
      
        $xml = '<?xml version="1.0" encoding="UTF-8"?>';
        $xml .= '<StreamingDistributionConfig xmlns="http://cloudfront.amazonaws.com/doc/2009-12-01/">';
        $xml .= '<Origin>' . $container['settings']['bucket'] . '.s3.amazonaws.com</Origin>';
        $xml .= '<CallerReference>' . $result['simplexml']->StreamingDistributionConfig->CallerReference . '</CallerReference>';
        $xml .= '<Enabled>false</Enabled>';
        $xml .= '</StreamingDistributionConfig>';
      
        $result = _storage_s3_cloudfront_request($container, 'PUT', TRUE, $xml);

        if($result['http_code'] == 200) {

          $message = 'Disabled CloudFront streaming distribution for destroyed container <i>' . $container['name'] . '</i>.';
          watchdog('storage_s3', $message, NULL, WATCHDOG_NOTICE);
          continue;
        }
      }
      else {
        
        if($result['simplexml']->Status == 'InProgress')
          continue;
      
        $result = _storage_s3_cloudfront_request($container, 'DELETE', TRUE);

        if($result['http_code'] == 204) {

          $message = 'Deleted CloudFront streaming distribution for destroyed container <i>' . $container['name'] . '</i>.';
          watchdog('storage_s3', $message, NULL, WATCHDOG_NOTICE);
        }
      }
    }
        
    unset($delete[$container['container_id']]);
    variable_set('storage_s3_cloudfront_streaming_delete', $delete);
  }
}


/**
 * Implement hook_cron() .
 */
function storage_s3_cron() {

  _storage_s3_cloudfront_deploy();
  _storage_s3_cloudfront_streaming_deploy();
  _storage_s3_cloudfront_delete();
  _storage_s3_cloudfront_streaming_delete();
}


/**
 * Implement hook_storage_container_info() .
 */
function storage_s3_storage_container_info($container) {

  $locations = _storage_s3_locations();

  $info = array(
    t('Bucket') => $container['settings']['bucket'],
    t('Location') => $locations[$container['settings']['location']],
  );
  
  if($container['serving'] == STORAGE_API_SERVING) {
  
    if($container['settings']['cloudfront']) {
    
      if($container['settings']['cloudfront_status'] == 'Deployed')
        $status = t('Yes');
      else
        $status = t('Setting up. This can take a few minutes.');
    }
    else {
      $status = t('No');
    }
  
    $info[t('Serving with CloudFront')] = $status;
    
    if($container['settings']['cloudfront_status'] == 'Deployed') {
      $info[t('CloudFront domain name')] = $container['settings']['cloudfront_domain'];
    }

    if($container['settings']['cloudfront_streaming']) {
    
      if($container['settings']['cloudfront_streaming_status'] == 'Deployed')
        $status = t('Yes');
      else
        $status = t('Setting up. This can take a few minutes.');
    }
    else {
      $status = t('No');
    }
  
    $info[t('Streaming with CloudFront')] = $status;
    
    if($container['settings']['cloudfront_streaming_status'] == 'Deployed') {
      $info[t('CloudFront streaming domain name')] = $container['settings']['cloudfront_streaming_domain'];
    }
  }
  
  if($container['serving'] == STORAGE_API_ACCESS_CONTROL)
    $info[t('URL lifetime')] = format_interval($container['settings']['url_lifetime']);

  return $info;
}


/**
 * Implement hook_storage_object_instance_create() .
 */
function storage_s3_storage_object_instance_create($container, $file) {

  $result = _storage_s3_request($container, 'PUT', $container['settings']['bucket'], 
    'object-' . $file['object_id'], $file);
  
  return $result['http_code'] == 200;
}


/**
 * Implement hook_storage_object_instance_copy() .
 */
function storage_s3_storage_object_instance_copy($container, $file, $source_container) {

  $source['copy_source'] = '/' . $source_container['settings']['bucket'] . '/object-' . $file['object_id'];
  
  $result = _storage_s3_request($container, 'PUT', $container['settings']['bucket'], 
    'object-' . $file['object_id'], $source);
    
  if($result['http_code'] == 200 && $result['simplexml']) {

    if($result['simplexml']->getName() == 'CopyObjectResult')
      return TRUE;
  }
  
  return FALSE;
}


/**
 * Implement hook_storage_object_instance_destroy() .
 */
function storage_s3_storage_object_instance_destroy($container, $file) {
  
  $result = _storage_s3_request($container, 'DELETE', $container['settings']['bucket'], 
    'object-' . $file['object_id']);
  
  return $result['http_code'] == 204;
}


/**
 * Implement hook_storage_object_instance_get_filepath() .
 */
function storage_s3_storage_object_instance_get_filepath($container, $file) {
  
  $result = _storage_s3_request($container, 'GET', $container['settings']['bucket'], 
    'object-' . $file['object_id']);

  return $result['filepath'];
}


/**
 * Implement hook_storage_object_instance_serve() .
 */
function storage_s3_storage_object_instance_serve($container, $file) {

  return _storage_s3_url($container, 'object-' . $file['object_id']);
}


/**
 * Implement hook_storage_object_instance_serve_rmtp() .
 */
function storage_s3_storage_object_instance_serve_rtmp($container, $file) {

  return _storage_s3_rtmp($container, 'object-' . $file['object_id']);
}


/**
 * Implement hook_storage_file_instance_create() .
 */
function storage_s3_storage_file_instance_create($container, $file) {
  
  $result = _storage_s3_request($container, 'PUT', $container['settings']['bucket'], 
    'file-' . $file['file_id'], $file);
  
  return $result['http_code'] == 200;
}


/**
 * Implement hook_storage_file_instance_copy() .
 */
function storage_s3_storage_file_instance_copy($container, $file, $source_container) {
  
  $source['copy_source'] = '/' . $source_container['settings']['bucket'] . '/file-' . $file['file_id'];
  
  $result = _storage_s3_request($container, 'PUT', $container['settings']['bucket'], 
    'file-' . $file['file_id'], $source);
  
  if($result['http_code'] == 200 && $result['simplexml']) {

    if($result['simplexml']->getName() == 'CopyObjectResult')
      return TRUE;
  }
  
  return FALSE;
}


/**
 * Implement hook_storage_file_instance_destroy() .
 */
function storage_s3_storage_file_instance_destroy($container, $file) {
  
  $result = _storage_s3_request($container, 'DELETE', $container['settings']['bucket'], 
    'file-' . $file['file_id']);
  
  return $result['http_code'] == 204;
}


/**
 * Implement hook_storage_file_instance_get_filepath() .
 */
function storage_s3_storage_file_instance_get_filepath($container, $file) {
  
  $result = _storage_s3_request($container, 'GET', $container['settings']['bucket'], 
    'file-' . $file['file_id']);

  return $result['filepath'];
}


/**
 * Implement hook_storage_file_instance_serve() .
 */
function storage_s3_storage_file_instance_serve($container, $file) {

  return _storage_s3_url($container, 'file-' . $file['file_id']);
}


/**
 * Implement hook_storage_file_instance_serve_rtmp() .
 */
function storage_s3_storage_file_instance_serve_rtmp($container, $file) {

  return _storage_s3_rtmp($container, 'file-' . $file['file_id']);
}

