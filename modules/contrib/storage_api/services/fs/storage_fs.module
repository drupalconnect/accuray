<?php
// $Id: storage_fs.module,v 1.1.2.7 2009/12/28 16:47:26 jbrown Exp $

// Copyright 2008-2009 Jonathan Brown


/**
 * Implement hook_storage_service_info() .
 */
function storage_fs_storage_service_info() {
  
  $info = array(
    'name' => t('Filesystem'),
    'dynamic' => FALSE,
    'local' => TRUE,
    'direct' => FALSE,
    'can_copy' => FALSE,
  );
  
  return $info;
}


/**
 * Implement hook_storage_container_settings_form() .
 */
function storage_fs_storage_container_settings_form($settings, $serving, $edit) {

  $items['path'] = array(
    '#type' => 'textfield',
    '#title' => t('Directory path'),
    '#description' => t("Can be absolute or relative."),
    '#default_value' => $settings['path'] ? $settings['path'] : file_directory_path(),
    '#required' => TRUE,
    '#validated' => TRUE,
  );
  
  if($edit) {
    $items['path']['#description'] .= '<br />' . 
      t('If this setting is changed, the directory must be moved manually to the new path.');
  }
  
  if($serving) {
  
    $description  = "The URL path of the directory path specified above (typically exactly the same).<br/>";
    $description .= "Can be absolute or relative.<br />";

    $items['base_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Base URL path'),
      '#description' => t($description),
      '#default_value' => $settings['base_url'] ? $settings['base_url'] : file_directory_path(),
      '#required' => TRUE,
      '#validated' => TRUE,
    );
  }

  return $items;
}


/**
 * Implement hook_storage_container_validate() .
 */
function storage_fs_storage_container_validate($container, $edit) {

  if(!$container['settings']['path']) {
    form_set_error('settings][path', t('Directory path field is required.'));
  }
  else if(!$edit) {
  
    if(file_check_directory($container['settings']['path'])) {
      form_set_error('settings][path', t('Directory already exists.'));
    }
  }
    
  if($container['serving']) {
  
    if(!$container['settings']['base_url']) {
      form_set_error('settings][base_url', t('Base URL path field is required.'));
    }
  }
}


/**
 * Implement hook_storage_container_create() .
 */
function storage_fs_storage_container_create($container) {

  $storage_api_path = drupal_get_path('module', 'storage_api');

  if(!file_check_directory($container['settings']['path'], FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
    form_set_error('settings][path', t('Unable to create directory. The parent directory must already exist and have the correct permissions.'));
    return $container;
  }
  
  $path = $container['settings']['path'] . '/objects';
  
  if(!file_check_directory($path, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS, 'settings][path')) {
    return $container;
  }

  copy($storage_api_path . '/objects.htaccess', $path . '/.htaccess');

  $path = $container['settings']['path'] . '/files';

  if(!file_check_directory($path, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS, 'settings][path')) {
    return $container;
  }

  copy($storage_api_path . '/files.htaccess', $path . '/.htaccess');

  return $container;
}


/**
 * Implement hook_storage_container_info() .
 */
function storage_fs_storage_container_info($container) {

  $info['Free space'] = storage_api_format_size(@disk_free_space($container['settings']['path']));
  $info['Directory'] = realpath($container['settings']['path']);

  if($container['serving'])
    $info['Base URL'] = url($container['settings']['base_url'], array('absolute' => TRUE));

  return $info;
}


/**
 * Implement hook_storage_container_destroy() .
 */
function storage_fs_storage_container_destroy($container) {
  
  return TRUE;
}


/**
 * Implement hook_storage_object_instance_create() .
 */
function storage_fs_storage_object_instance_create($container, $file) {
  
  $filename = $file['object_id'];

  
  // We need the filename to have an extension that matches its mime type
  // so the webserver serves the file with the correct mime type.

  $extension = storage_api_mime_extension($file['mimetype']);

  if($extension)
    $filename .= '.' . $extension;
    
  $path = $container['settings']['path'] . '/objects/' . $filename;

  if(!$file['keep_me'])
    $success = @rename($file['filepath'], $path);
  else
    $success = @copy($file['filepath'], $path);
  
  return $filename;
}


/**
 * Implement hook_storage_object_instance_destroy() .
 */
function storage_fs_storage_object_instance_destroy($container, $file) {
  
  @unlink($container['settings']['path'] . '/objects/' . $container['reference']);
  
  return TRUE;
}


/**
 * Implement hook_storage_object_instance_get_filepath() .
 */
function storage_fs_storage_object_instance_get_filepath($container, $file) {
  
  return $container['settings']['path'] . '/objects/' . $container['reference'];
}


/**
 * Implement hook_storage_object_instance_serve() .
 */
function storage_fs_storage_object_instance_serve($container, $file) {

  return $container['settings']['base_url'] . '/objects/' . $container['reference'];
}


/**
 * Implement hook_storage_file_instance_create() .
 */
function storage_fs_storage_file_instance_create($container, $file) {

  // File instances need to use the actual filename so the webserver serves them
  // with their filename in the Content-Disposition http header.
  
  // This means we cannot use the Cache-control max-age http header
  // as URLs may be reused.
  
  $filename = storage_api_unique_filename($container, $file['filename']);
  
  $path = $container['settings']['path'] . '/files/' . $filename;

  if(!$file['keep_me'])
    $success = @rename($file['filepath'], $path);
  else
    $success = @copy($file['filepath'], $path);

  if($success)
    return $filename;
}


/**
 * Implement hook_storage_file_instance_destroy() .
 */
function storage_fs_storage_file_instance_destroy($container, $file) {
    
  @unlink($container['settings']['path'] . '/files/' . $container['reference']);
  
  return TRUE;
}


/**
 * Implement hook_storage_file_instance_get_filepath() .
 */
function storage_fs_storage_file_instance_get_filepath($container, $file) {

  return $container['settings']['path'] . '/files/' . $container['reference'];
}


/**
 * Implement hook_storage_file_instance_serve() .
 */
function storage_fs_storage_file_instance_serve($container, $file) {

  return $container['settings']['base_url'] . '/files/' . $container['reference'];
}

