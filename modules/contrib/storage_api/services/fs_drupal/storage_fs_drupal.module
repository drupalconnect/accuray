<?php
// $Id: storage_fs_drupal.module,v 1.1.4.1.2.8 2009/12/28 16:47:26 jbrown Exp $

// Copyright 2008-2009 Jonathan Brown


/**
 * Implement hook_storage_service_info() .
 */
function storage_fs_drupal_storage_service_info() {
  
  $info = array(
    'name' => t('Filesystem / Drupal'),
    'dynamic' => TRUE,
    'local' => TRUE,
    'direct' => TRUE,
    'can_copy' => FALSE,
  );
  
  return $info;
}


/**
 * Implement hook_storage_container_settings_form() .
 */
function storage_fs_drupal_storage_container_settings_form($settings, $serving, $edit) {

  $items['path'] = array(
    '#type' => 'textfield',
    '#title' => t('Directory path'),
    '#description' => t("Can be absolute or relative."),
    '#default_value' => $settings['path'] ? $settings['path'] : file_directory_path(),
    '#maxlength' => 255,
    '#required' => TRUE,
    '#validated' => TRUE
  );
  
  if($edit) {
    $items['path']['#description'] .= '<br />' . 
      t('If this setting is changed, the directory must be moved manually to the new path.');
  }
  
  return $items;
}


/**
 * Implement hook_storage_container_validate() .
 */
function storage_fs_drupal_storage_container_validate($container, $edit) {

  if(!$container['settings']['path']) {
    form_set_error('settings][path', t('Directory path field is required.'));
  }
  else if(!$edit) {
  
    if(file_check_directory($container['settings']['path'])) {
      form_set_error('settings][path', t('Directory already exists.'));
    }
  }
}


/**
 * Implement hook_storage_container_create() .
 */
function storage_fs_drupal_storage_container_create($container) {

  if(!file_check_directory($container['settings']['path'], FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
    form_set_error('settings][path', t('Unable to create directory. The parent directory must already exist and have the correct permissions.'));
  }
  
  return $container;
}


/**
 * Implement hook_storage_container_info() .
 */
function storage_fs_drupal_storage_container_info($container) {

  $info['Free space'] = storage_api_format_size(@disk_free_space($container['settings']['path']));
  $info['Directory'] = realpath($container['settings']['path']);

  return $info;
}


/**
 * Implement hook_storage_container_destroy() .
 */
function storage_fs_drupal_storage_container_destroy($container) {
  
  return TRUE;
}


/**
 * Implement hook_storage_object_instance_create() .
 */
function storage_fs_drupal_storage_object_instance_create($container, $file) {
  
  if(!$file['keep_me'])
    $success = @rename($file['filepath'], $container['settings']['path'] . '/' . $file['object_id']);
  else
    $success = @copy($file['filepath'], $container['settings']['path'] . '/' . $file['object_id']);
  
  return $success;
}


/**
 * Implement hook_storage_object_instance_destroy() .
 */
function storage_fs_drupal_storage_object_instance_destroy($container, $file) {
  
  @unlink($container['settings']['path'] . '/' . $file['object_id']);
  
  return TRUE;
}


/**
 * Implement hook_storage_object_instance_get_filepath() .
 */
function storage_fs_drupal_storage_object_instance_get_filepath($container, $file) {
  
  return $container['settings']['path'] . '/' . $file['object_id'];
}


/**
 * Implement hook_storage_object_instance_serve() .
 */
function storage_fs_drupal_storage_object_instance_serve($container, $file) {
  storage_api_set_http_headers($file);

  @readfile($container['settings']['path'] . '/' . $file['object_id']);
  exit();
}

