<?php
// $Id: vd.module,v 1.1.2.20 2010/10/01 11:54:05 swentel Exp $

/**
 * @file
 * Views displays module file.
 */

/**
 * Implementation of hook_registry_alter().
 */
function vd_theme_registry_alter(&$registry) {
  $path = drupal_get_path('module', 'vd') .'/templates';
  array_unshift($registry['views_view']['theme paths'], $path);
}

/**
 * Implementation of hook_ds_api().
 */
function vd_ds_api() {

  $help = array(
    '<h3>Views displays</h3>
      <p>This module comes with a vd.tpl.php, available in the templates folder, which is optimized for use with Views Displays. You can copy the file to your themes folder to use your own version if you want. Copying the file to your theme folder will only work if views-view.tpl.php is in the theme folder.</p>
      <p>All views are disabled by default to make sure the layout overview page isn\'t flooded with views. You can enable them on the '. l('buildmodes', 'admin/build/ds/vd/buildmodes') .' page. Use the "toggle" checkbox so the view display is ignored. Note that "default" and "feed" displays are ignored. If you experience problems with checkboxes not being able to be unchecked in the matrix mode, remove entries from the variable table which begin with \'vd_type_\' and all should work out fine after that.</p>
      <p>If you enabled the <a href="http://drupal.org/project/views_attach">views attach</a> module, those views will be made available as fields on node types (user attachments is not supported yet). These views are excluded also from views displays.</p>
    '
  );

  return array(
    'title' => 'Views displays',
    'module' => 'vd',
    'object' => 'view',
    'views_base' => 'views',
    'types' => 'vd_get_types',
    'no_new_build_modes' => TRUE,
    'help' => $help,
  );
}

/**
 * Implementation of hook_init().
 */
function vd_init() {
  drupal_add_css(drupal_get_path('module', 'vd') .'/css/vd_regions.css');
}

/**
 * Implementation of hook_theme().
 */
function vd_theme() {
  $theme_functions = array();

  // Single theming functions.
  $formatters = array('vd_title_h1', 'vd_title_h2', 'vd_title_h2_block', 'vd_title_p');

  foreach ($formatters as $formatter) {
    $theme_functions[$formatter] = array(
      'arguments' => array('view' => NULL),
    );
  }

  return $theme_functions;
}

/**
 * Return all views.
 */
function vd_get_types() {
  global $conf;
  $types = array();

  $views = views_get_all_views();

  foreach ($views as $view) {
    if (!empty($view->disabled)) {
      continue;
    }

    foreach ($view->display as $key => $display) {
      $ignore_views = array(
        'default' => 'default',
        'feed' => 'feed',
        'node_content' => 'node_content'
      );
      // let's skip default, feed, node_content ..
      if (!isset($ignore_views[$display->display_plugin])) {
        $vd_view = new stdClass();
        $vd_view->name = $view->name .': '. $display->display_title;
        $vd_view->type = $view->name .'_'. $key;
        $types[$view->name .'_'. $key] = $vd_view;

        // See if this is the first time we can find this view.
        // If so, let's disable it by default.
        $ds_type_name = 'vd_type_'. $vd_view->type;
        if (!isset($conf[$ds_type_name])) {
          variable_set($ds_type_name, TRUE);
        }
      }
    }
  }

  return $types;
}

/**
 * Implementation of hook_content_build_modes().
 */
function vd_content_build_modes() {
  $build_modes = array(
   'vd' => array(
     'title' => t('Views displays'),
     'build modes' => array(
      'full' => array(
        'title' => t('Full'),
        'weight' => -1,
        'module' => 'vd',
      )
    )),
  );

  return $build_modes;
}


/**
 * Implementation of hook_ds_fields().
 */
function vd_ds_fields($type_name, $build_mode, $extra) {

  $all_fields = array();

  $vd_fields = array(
    'admin_links' => array(
      'title' => t('Admin links'),
      'type' => DS_FIELD_TYPE_PREPROCESS,
      'status' => DS_FIELD_STATUS_STATIC,
      'properties' => array(
        'css-class' => 'views-admin-links views-hide',
      ),
    ),
    'title' => array(
      'title' => t('Views title'),
      'type' => DS_FIELD_TYPE_THEME,
      'status' => DS_FIELD_STATUS_STATIC,
      'properties' => array(
        'formatters' => array(
          'vd_title_h1' => t('H1 title'),
          'vd_title_h2' => t('H2 title'),
          'vd_title_h2_block' => t('H2 block title'),
          'vd_title_p' => t('Paragraph title'),
        ),
      )
    ),
    'header' => array(
      'title' => t('Views header'),
      'type' => DS_FIELD_TYPE_PREPROCESS,
      'status' => DS_FIELD_STATUS_STATIC,
    ),
    'exposed' => array(
      'title' => t('Exposed filters'),
      'type' => DS_FIELD_TYPE_PREPROCESS,
      'status' => DS_FIELD_STATUS_STATIC,
    ),
    'attachment_before' => array(
      'title' => t('Attachment before'),
      'type' => DS_FIELD_TYPE_PREPROCESS,
      'status' => DS_FIELD_STATUS_STATIC,
    ),
    'rows' => array(
      'title' => t('Views content'),
      'type' => DS_FIELD_TYPE_PREPROCESS,
      'status' => DS_FIELD_STATUS_STATIC,
    ),
    'empty' => array(
      'title' => t('Empty text'),
      'type' => DS_FIELD_TYPE_PREPROCESS,
      'status' => DS_FIELD_STATUS_STATIC,
    ),
    'pager' => array(
      'title' => t('Pager'),
      'type' => DS_FIELD_TYPE_PREPROCESS,
      'status' => DS_FIELD_STATUS_STATIC,
    ),
    'attachment_after' => array(
      'title' => t('Attachment after'),
      'type' => DS_FIELD_TYPE_PREPROCESS,
      'status' => DS_FIELD_STATUS_STATIC,
    ),
    'more' => array(
      'title' => t('More'),
      'type' => DS_FIELD_TYPE_PREPROCESS,
      'status' => DS_FIELD_STATUS_STATIC,
    ),
    'footer' => array(
      'title' => t('Views footer'),
      'type' => DS_FIELD_TYPE_PREPROCESS,
      'status' => DS_FIELD_STATUS_STATIC,
    ),
    'feed_icon' => array(
      'title' => t('Feed icon'),
      'type' => DS_FIELD_TYPE_PREPROCESS,
      'status' => DS_FIELD_STATUS_STATIC,
    ),
  );

  $all_fields['vd'] = $vd_fields;

  // Views attach support.
  if (module_exists('views_attach')) {
    $extras = views_attach_content_extra_fields($type_name);
    if (!empty($extras)) {
      $vd_attach = array();
      foreach ($extras as $key => $value) {
        $vd_attach[$key] = array(
          'title' => ($value['label'] != 'None') ? $value['label'] : str_replace('Attached view:', '', $value['description']),
          'type' => DS_FIELD_TYPE_IGNORE,
          'status' => DS_FIELD_STATUS_STATIC,
        );
      }
      $all_fields['nd'] = $vd_attach;
    }
  }

  return $all_fields;
}

/**
 * Implementation of hook_preprocess_view().
 */
function vd_preprocess_views_view(&$vars) {

  $view_object = new stdClass();
  $view_object->type = $vars['view']->name .'_'. $vars['view']->current_display;
  if (variable_get('vd_type_'. $view_object->type, FALSE)) {
    return;
  }

  // Good to go.
  $view = $vars['view'];
  $vars['view']->build_mode = 'full';
  $vars['view']->type = $view_object->type;
  $view_object->build_mode = 'full';
  $view_object->view = $view;

  ds_build_fields_and_regions($view_object, 'vd');

  if (!$view_object->render_by_ds) {
    return;
  }

  if (!empty($view_object->ds_fields)) {
    foreach ($view_object->ds_fields as $key => $field) {
      if (!isset($view_object->preprocess_fields[$key])) {
        $field_key = $key .'_rendered';
        $vars[$field_key] = $view_object->{$field_key};
      }
    }
  }

  $vars['template_files'][] = 'vd';
  $vars['regions'] = $view_object->regions;
  $vars['views_content'] = ds_render_content($view_object, 'vd', $vars);
}

/**
 * VD theming functions.
 */
function theme_vd_title_h1($field) {
  return '<h1>'. check_plain($field['object']->view->display_handler->get_option('title')) .'</h1>';
}

function theme_vd_title_h2($field) {
  return '<h2>'. check_plain($field['object']->view->display_handler->get_option('title')) .'</h2>';
}

function theme_vd_title_h2_block($field) {
  return '<h2 class="block-title">'. check_plain($field['object']->view->display_handler->get_option('title')) .'</h2>';
}

function theme_vd_title_p($field) {
  return '<p>'. check_plain($field['object']->view->display_handler->get_option('title')) .'</p>';
}
