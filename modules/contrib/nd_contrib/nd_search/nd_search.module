<?php
// $Id: nd_search.module,v 1.1.2.11.2.32 2010/10/01 11:56:48 swentel Exp $

/**
 * @file
 * Search support for node displays.
 */

/**
 * Implementation of hook_ds_info_alter().
 */
function nd_search_ds_info_alter(&$help, $module) {
  if ($module == 'nd') {
    $help[] = '<h3>Node displays Search</h3>
        <p>Node displays has the possibility to override the search page so you can make use of the Display Suite. There are a few extra <a href="'. url('admin/build/ds/nd/nd_search') .'">settings</a> available, even more if you are using Apachesolr. With apachesolr, this module will also index all CCK fields so they are available for you in custom queries.</p>
        <p>ND search also exposes 3 extra variables which you can use in search-results.tpl.php if you choose not to override the search page with Display suite. If you override the search page, you can select which string to output on the <a href="'. url('admin/build/ds/nd/nd_search') .'">settings</a> screen. These variables are:
          <ul>
          <li>search_totals: Total results: @total</li>
          <li>search_totals_plus_keywords: Your search for "<strong>@search</strong>" gave back @total results.</li>
          <li>search_totals_from_to_end: Displaying @start - @end of @total results.
          </ul></p>
        ';
  }
}

/**
 * Implementation of hook_menu().
 */
function nd_search_menu() {
  $items = array();

  if (module_exists('ds_ui')) {
    $items['admin/build/ds/nd/nd_search'] = array(
      'title' => 'Search',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('nd_search_settings'),
      'access arguments' => array('administer nd'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 10,
    );
  }

  return $items;
}

/**
 * Menu callback: ND search settings.
 */
function nd_search_settings() {
  $form = array();

  $form['general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General'),
  );

  $form['general']['nd_search_override_search_page'] = array(
    '#type' => 'checkbox',
    '#title' => t('Override search page'),
    '#description' => t('Toggle this checkbox if you want to display the result of search with the display suite.'),
    '#default_value' => variable_get('nd_search_override_search_page', FALSE),
  );

  $form['general']['nd_search_deny_user_tab'] = array(
    '#type' => 'checkbox',
    '#title' => t('Deny user tab'),
    '#description' => t('Toggle this checkbox if you want to deny access to the user search tab.'),
    '#default_value' => variable_get('nd_search_deny_user_tab', TRUE),
  );

  $form['general']['nd_search_preprocess_vars'] = array(
    '#type' => 'select',
    '#options' => array(
      'none' => t('None'),
      'search_totals' => t('Total results'),
      'search_totals_plus_keywords' => t('Total results + keywords'),
      'search_totals_from_to_end' => t('Totals + start to end')
    ),
    '#title' => t('Extra variables'),
    '#description' => t('Choose an extra variable to display on the results screen. Only applicable if override search page above is enabled'),
    '#default_value' => variable_get('nd_search_preprocess_vars', 'none'),
  );

  $form['general']['nd_search_highlight'] = array(
    '#type' => 'checkbox',
    '#title' => t('Highlight search word'),
    '#description' => t('Use jQuery to highlight the word in the results.'),
    '#default_value' => variable_get('nd_search_highlight', FALSE),
  );

  $form['general']['nd_search_highlight_selector'] = array(
    '#type' => 'textfield',
    '#title' => t('HTML selector'),
    '#description' => t('Enter the css selector, if not sure, leave this by default.'),
    '#default_value' => variable_get('nd_search_highlight_selector', '.buildmode-3'),
  );



  if (module_exists('apachesolr')) {

    $form['apachesolor'] = array(
      '#type' => 'fieldset',
      '#title' => t('Apache Solr'),
    );

    $build_modes = ds_get_build_modes('nd');
    foreach ($build_modes as $build_mode => $value) {
      $options[$build_mode] = $value['title'];
    }
    $form['apachesolor']['nd_search_apachesolr_build_mode'] = array(
      '#type' => 'select',
      '#title' => t('Build mode'),
      '#description' => 'Select another build mode in favor of the default search build mode. You can hide the search results build mode with matrix form afterwards.',
      '#default_value' => variable_get('nd_search_apachesolr_build_mode', NODE_BUILD_SEARCH_RESULT),
      '#options' => $options,
    );
    $form['apachesolor']['nd_search_apachesolr_show_title'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show title'),
      '#description' => t('Toggle this checkbox if you want to display the "Search results" title.'),
      '#default_value' => variable_get('nd_search_apachesolr_show_title', FALSE),
    );
    $form['apachesolor']['nd_search_apachesolr_hide_current_filters'] = array(
      '#type' => 'checkbox',
      '#title' => t('Retain filters'),
      '#description' => t('Toggle this checkbox if you want to hide the "Retain current filters" checkbox.'),
      '#default_value' => variable_get('nd_search_apachesolr_hide_current_filters', TRUE),
    );
    $form['apachesolor']['nd_search_apachesolr_language'] = array(
      '#type' => 'checkbox',
      '#title' => t('Language'),
      '#description' => t('Toggle this checkbox if you want only want to search in the language the site is currently in. Enable this if you have at least 2 languages.'),
      '#default_value' => variable_get('nd_search_apachesolr_language', FALSE),
    );
  }

  return system_settings_form($form);
}

/**
 * Implementation of hook_menu_alter().
 */
function nd_search_menu_alter(&$items) {
  if (variable_get('nd_search_deny_user_tab', TRUE)) {
    $items['search/user/%menu_tail']['access callback'] = FALSE;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function nd_search_form_alter(&$form, $form_state, $form_id) {

  if ($form_id == 'search_form') {
    // Hide retain current filters checkbox.
    if (variable_get('nd_search_apachesolr_hide_current_filters', TRUE)) {
      $form['basic']['apachesolr_search']['retain-filters']['#access'] = FALSE;
    }
  }
}

/**
 * Implementation of hook_preprocess_search_results().
 *
 * Adds 3 new variables:
   - $search_totals
   - $search_totals_plus_keywords
   - $search_totals_from_to_end
 */
function nd_search_preprocess_search_results(&$variables) {
  _nd_search_preprocess($variables);
}

/**
 * Helper function so it can be used in hook_search_page().
 *
 * @param array $variables The search variables.
 */
function _nd_search_preprocess(&$variables) {
  // define the number of results being shown on a page
  $items_per_page = variable_get('apachesolr_rows', 10);

  // get the current page
  $current_page = isset($_REQUEST['page']) ? $_REQUEST['page']+1 : 1;

  // get the total number of results from the $GLOBALS
  $total = $GLOBALS['pager_total_items'][0];

  // perform calculation
  $start = $items_per_page * $current_page - ($items_per_page - 1);
  $end = $items_per_page * $current_page;
  if ($end > $total) $end = $total;

  // set this html to the $variables
  $keys = trim(search_get_keys());
  $variables['search_totals'] = t('Total results: @total.', array('@total' => $total));
  $variables['search_totals_plus_keywords'] = t('Your search for "<strong>@search</strong>" gave back @total results.', array('@search' => $keys, '@total' => $total));
  $variables['search_totals_from_to_end'] = t('Displaying @start - @end of @total results.', array('@start' => $start, '@end' => $end, '@total' => $total));
}

/**
 * Implementation of hook_apachesolr_update_index().
 *
 * Creme de la creme: Put the full node object in the index,
 * so no node_loads are needed for results.
 */
function nd_search_apachesolr_update_index(&$document, $node) {

  // Because the body, content and teaser will mess up the serializing,
  // we'll unset content and encode the body and teaser value. We'll
  // rebuild it in _solr_document_to_node();
  $node->body = str_replace("\n", "", htmlentities($node->content['body']['#value']));
  $node->teaser =  str_replace("\n", "", htmlentities($node->teaser));
  unset($node->content);

  // Serialize it.
  $node = serialize($node);
  $document->tm_node = $node;
}

/**
 * Implementation of hook_modify_query().
 *
 * Modify the apache solr query, to return the serialized node + body field.
 * Also make it language dependant.
 */
function nd_search_apachesolr_modify_query(&$query, &$params, $caller) {
  if (isset($params['fl'])) {
    $params['fl'] .= ',tm_node';
  }
  else {
    $params['fl'] = ',tm_node';
  }

  if (variable_get('nd_search_apachesolr_language', FALSE)) {
    global $language;
    $query->add_filter('language', $language->language);
  }
}

/**
 * Get the serialized version from the node, and unserialize it.
 *
 * @param ApacheSolr class $doc The apache solr document to be converted.
 * @return stdClass $node Node version from the document.
 */
function _solr_document_to_node($doc) {
  $tm_node = $doc['node']->getField('tm_node');
  $to_serialize = isset($tm_node['value'][0]) ? $tm_node['value'][0] : (isset($tm_node['value']) ? $tm_node['value'] : NULL);
  $node = @unserialize($to_serialize);

  // Rebuild body and teaser. Fallback if something went wrong.
  if (isset($node->nid)) {
    $node->body = html_entity_decode($node->body);
    $node->teaser = html_entity_decode($node->teaser);
  }
  else {
    $nid = $doc['node']->getField('nid');
    $node = node_load($nid['value']);
  }

  return $node;
}

/**
 * Implementation of hook_apachesolr_cck_fields_alter().
 *
 * Add the some CCK fields to apache solr index.
 */
function nd_search_apachesolr_cck_fields_alter(&$mappings) {
  $fields = content_fields();

  foreach ($fields as $field) {
    $type = _get_solr_type($field['type']);
    if ($type != FALSE) {
      $mappings['per-field'][$field['field_name']] = array(
        'display_callback' => '',
        // The callback function gets called at indexing time to get the values.
        'indexing_callback' => 'nd_search_indexing_callback',
        // Common types are 'text', 'string', 'integer',
        // 'double', 'float', 'date', 'boolean'
        'index_type' => _get_solr_type($field['type']),
      );
    }
  }
}

/**
 * Get the corresponding apache solr type from a cck type.
 *
 * @param string $type CCK field type.
 * @return array with type and prefix in apache solr.
 */
function _get_solr_type($type) {
  $types = array(
    'text' => 'string',
    'number_integer' => 'integer',
    'number_float' => 'float',
    'filefield' => 'string',
    'imagefield' => 'string',
  );

  // Let's skip date, see http://drupal.org/node/558160
  if ($type == 'date' || $type == 'datetime' || $type == 'datestamp') {
    return FALSE;
  }

  // Default type is text
  if (!isset($types[$type])) {
    return 'string';
  }

  return $types[$type];
}

/**
 * Put all the needed CCK fields in the index.
 *
 * @param stdClass $node The current node being indexed.
 * @param string $fieldname The current field being indexed.
 * @return an array of arrays. Each inner array is a value, and must be keyed 'safe' => $value.
 */
function nd_search_indexing_callback($node, $fieldname) {
  $fields = array();

  foreach ($node->$fieldname as $field) {
    if (isset($field['safe'])) {
      $fields[] = array('value' => $field['safe']);
    }
  }

  return $fields;
}

/**
 * Implementation of hook_search_page for drupal core search.
 */
if (variable_get('nd_search_override_search_page', FALSE)) {
  function node_search_page($results) {
    $output = '';

    // Add highlighting.
    if (variable_get('nd_search_highlight', FALSE)) {
      drupal_add_js(drupal_get_path('module', 'nd_search') .'/nd_search.js');
      drupal_add_css(drupal_get_path('module', 'nd_search') .'/nd_search.css');

      drupal_add_js(array(
        'nd_search' => array(
          'selector' => check_plain(variable_get('nd_search_highlight_selector', '.buildmode-3')),
          'search' => check_plain(arg(2)),
        ),
      ), 'setting');
    }

    // Extra variables.
    if (variable_get('nd_search_preprocess_vars', 'none') != 'none') {
      $variables = array();
      _nd_search_preprocess($variables);
      $output .= '<div class="nd-search-extra">'. $variables[variable_get('nd_search_preprocess_vars', 'none')] .'</div>';
    }

    foreach ($results as $key => $result) {
      $node = $result['node'];
      node_invoke_nodeapi($node, 'alter', TRUE, FALSE);
      $output .= theme('node', $node, TRUE, FALSE);
    }

    $output .= theme('pager', NULL, 10, 0);

    return $output;
  }
}

/**
 * Implementation of hook_search_page for apache solr search.
 */
if (variable_get('nd_search_override_search_page', FALSE)) {
  function apachesolr_search_search_page($results) {
    $output = '';

    // Add highlighting.
    if (variable_get('nd_search_highlight', FALSE)) {
      drupal_add_js(drupal_get_path('module', 'nd_search') .'/nd_search.js');
      drupal_add_css(drupal_get_path('module', 'nd_search') .'/nd_search.css');

      drupal_add_js(array(
        'nd_search' => array(
          'selector' => check_plain(variable_get('nd_search_highlight_selector', '.buildmode-3')),
          'search' => check_plain(arg(2)),
        ),
      ), 'setting');
    }

    // Search results title.
    if (variable_get('nd_search_apachesolr_show_title', FALSE)) {
      $output .= '<h2>'. t('Search results') .'</h2>';
    }

    // Extra variables.
    if (variable_get('nd_search_preprocess_vars', 'none') != 'none') {
      $variables = array();
      _nd_search_preprocess($variables);
      $output .= '<div class="nd-search-extra">'. $variables[variable_get('nd_search_preprocess_vars', 'none')] .'</div>';
    }

    // Results can either be a node or a user.
    // User indexing is currently available at http://github.com/SupermanScott/apachesolr_users.
    foreach ($results as $key => $result) {
      // This is most likely a user.
      if (!isset($result['fields']['nid'])) {
        $uid = $result['fields']['uid']['value'];
        $account = user_load($uid);
        if ($account->uid) {
          $account->type = 'ds_profile';
          $account->build_mode = 'search';
          user_build_content($account);
          $output .= theme('user_profile', $account);
        }
      }
      // All the rest is a node.
      else {
        $node = _solr_document_to_node($result);
        $node->build_mode = variable_get('nd_search_apachesolr_build_mode', NODE_BUILD_SEARCH_RESULT);
        $output .= node_view($node);
      }
    }

    // Pager
    $output .= theme('pager', NULL, variable_get('apachesolr_rows', 10), 0);

    return $output;
  }
}

/**
 * Implementation of hook_search_page for luceneapi search.
 */
if (variable_get('nd_search_override_search_page', FALSE)) {
  function luceneapi_node_search_page($results) {
    $output = '';

    // Add highlighting.
    if (variable_get('nd_search_highlight', FALSE)) {
      drupal_add_js(drupal_get_path('module', 'nd_search') .'/nd_search.js');
      drupal_add_css(drupal_get_path('module', 'nd_search') .'/nd_search.css');

      drupal_add_js(array(
        'nd_search' => array(
          'selector' => check_plain(variable_get('nd_search_highlight_selector', '.buildmode-3')),
          'search' => check_plain(arg(2)),
        ),
      ), 'setting');
    }

    // Extra variables.
    if (variable_get('nd_search_preprocess_vars', 'none') != 'none') {
      $variables = array();
      _nd_search_preprocess($variables);
      $output .= '<div class="nd-search-extra">'. $variables[variable_get('nd_search_preprocess_vars', 'none')] .'</div>';
    }

    foreach ($results as $key => $result) {
      $node = $result['node'];
      node_invoke_nodeapi($node, 'alter', TRUE, FALSE);
      $output .= theme('node', $node, TRUE, FALSE);
    }

    $output .= theme('pager', NULL, 10, 0);

    return $output;
  }
}
